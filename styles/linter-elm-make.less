@import "ui-variables";
@import "octicon-mixins";

.linter-elm-make {
  .fix-type {
    padding-right: @component-padding;
    color: @text-color-info;
  }
}
// Since `Intentions` does not allow specifying HTML, do a workaround here:
.linter-elm-make-fix-intention {
  .linter-elm-make.fix-type;
  display: inline;
  font-size: @font-size;
  font-family: @font-family;
}
.linter-elm-make-fix--replace-with::before {
  .linter-elm-make-fix-intention;
  content: "Replace with:";
}
.linter-elm-make-fix--add-type-annotation::before {
  .linter-elm-make-fix-intention;
  content: "Add type annotation:";
}
.linter-elm-make-fix--remove-unused-import::before {
  .linter-elm-make-fix-intention;
  content: "Remove unused import:";
}
.linter-elm-make-fix--add-import::before {
  .linter-elm-make-fix-intention;
  content: "Add import:";
}
.linter-elm-make-fix--add-import-as::before {
  .linter-elm-make-fix-intention;
  content: "Add import as:";
}
.linter-elm-make-fix--add-missing-patterns::before {
  .linter-elm-make-fix-intention;
  content: "Add missing patterns:";
}
.linter-elm-make-fix--fix-module-name::before {
  .linter-elm-make-fix-intention;
  content: "Fix module name:";
}
.linter-elm-make-fix--convert-to-port-module::before {
  .linter-elm-make-fix-intention;
  content: "Convert to port module:";
}
// .linter-elm-make-fix--remove-redundant-patterns::before {
//   .linter-elm-make-fix-intention;
//   content: "Remove redundant patterns:";
// }
.linter-elm-make-fix--run-elm-package-install::before {
  .linter-elm-make-fix-intention;
  content: "Run elm package install:";
}
.linter-elm-make-fix--define-top-level::before {
  .linter-elm-make-fix-intention;
  content: "Define top-level:";
}
.linter-elm-make-fix--change-type-annotation::before {
  .linter-elm-make-fix-intention;
  content: "Change type annotation:";
}
.linter-elm-make-fix--search-for-symbols-matching-type::before {
  .linter-elm-make-fix-intention;
  content: "Search for symbols matching type:";
}
.linter-elm-make.set-main-paths {
  .notes {
    padding: @component-padding;
  }
}
.linter-elm-make-issue {
  background: none;
}
.linter-elm-make-issue-selected {
  .linter-elm-make-issue;
  background-color: @background-color-highlight;
  border-radius: @component-border-radius;
}
.linter-elm-make-inferred-type-annotation {
  color: @text-color-subtle;
  font-style: italic;
}
.linter-elm-make-problem-overview {
  font-weight: bold;
  border-bottom: 1px dotted;
}
.linter-elm-make-details-emphasis {
  font-weight: bold;
}
.linter-elm-make-details-info {
  font-weight: bold;
  color: @text-color-info;
}
.linter-elm-make-details-type,
.linter-elm-make-details-name,
.linter-elm-make-details-suggestions {
  display: inline-block;
  font-weight: bold;
}
.linter-elm-make-details-type,
.linter-elm-make-details-suggestions {
  padding-left: @component-padding * 3;
}
.linter-elm-make-details-expected-type {
  .linter-elm-make-details-type;
}
.linter-elm-make-details-expected-name {
  .linter-elm-make-details-name;
}
.linter-elm-make-details-actual-type {
  .linter-elm-make-details-type;
}
.linter-elm-make-details-actual-name {
  .linter-elm-make-details-name;
}
.linter-elm-make-expected-type-diff-changed,
.linter-elm-make-expected-name-diff-changed {
  border-bottom: 1px dotted fadeout(@text-color-success, 25%);
  padding-bottom: 1px;
  color: @text-color-success !important; // `!important` is needed to make this work in `Atom Material` UI theme.
}
.linter-elm-make-actual-type-diff-changed,
.linter-elm-make-actual-name-diff-changed {
  border-bottom: 1px dotted fadeout(@text-color-error, 25%);
  padding-bottom: 1px;
  color: @text-color-error !important; // `!important` is needed to make this work in `Atom Material` UI theme.
}
.linter-elm-make-details-hint {
}
.linter-elm-make-details-hint-label {
  .octicon(info);
  color: @text-color-info;
  font-weight: bold;
}
.linter-elm-make-quick-fixes-tooltip.tooltip {
  .tooltip-inner {
    .octicon(light-bulb);
    padding: 4px !important;
    margin: 4px !important;
    background-color: @base-background-color !important;
    color: @text-color-info !important;
    font-weight: bold;
    border: 1px solid @text-color;
  }
  .tooltip-arrow {
    border: none;
  }
}
.linter-elm-make-quick-fixes-status {
  .octicon(light-bulb);
  color: @text-color-info;
}
.linter-elm-make-tooltip {
  font-size: 90%;
  background-color: fadeout(@base-background-color, 15%) !important;
  border: 2px solid fadeout(@text-color, 15%) !important;
  // Arrow pointer
  &::before {
    border-top-color: transparent !important;
    border-right-color: transparent !important;
    border-bottom-color: fadeout(@text-color, 15%) !important;
    border-left-color: fadeout(@text-color, 15%) !important;
  }
}
.linter-elm-make-tooltip-link {
  color: @text-color-subtle !important;
  text-decoration: underline;
  // .octicon(link-external);
}
// Make inline tooltip look like the linter panel.
atom-text-editor:not([mini])[data-grammar="source elm"] {
  #linter-tooltip linter-message {
    .linter-elm-make-tooltip;
    color: @text-color;
    a {
      .linter-elm-make-tooltip-link;
    }
  }
  #linter-inline {
    .linter-elm-make-tooltip;
    linter-message {
      span:last-child {
        color: @text-color;
      }
      linter-message-line {
        a {
          .linter-elm-make-tooltip-link;
        }
      }
    }
  }
}
.linter-elm-make-stderr {
  white-space: pre;
  font-family: monospace;
  font-size: 90%;
}
.linter-elm-make-region-range-error {
  background-color: fadeout(@background-color-error, 80%);
}
.linter-elm-make-region-range-warning {
  background-color: fadeout(@background-color-warning, 80%);
}
.linter-elm-make-token-actionable {
  &:hover {
    background-color: rgba(0, 0, 0, 0.3);
    cursor: pointer;
  }
  &:active {
    background-color: rgba(255, 255, 255, 0.3);
    cursor: pointer;
  }
}
.linter-elm-make-quick-fixes {
  margin-top: @component-padding;
}
.linter-elm-make-quick-fix-button {
  width: 100%;
  margin: 1px;
  background-color: @button-background-color;
  border: none;
  border-radius: @component-border-radius;
  cursor: pointer;
  text-align: left;
  &:hover {
    background-color: @button-background-color-hover;
  }
  &:active {
    background-color: lighten(@button-background-color-hover, 10%);
  }
  .icon {
    .octicon(light-bulb);
  }
  .fix-type {
    color: @text-color-info;
  }
  .fix-text {
    color: @text-color;
  }
}
